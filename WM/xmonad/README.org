#+TITLE: Xmonad config

* Dependencies
+ sudo pacman -S xmonad xmonad-contrib
* Imports
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
-- Base
import XMonad
import System.IO (hPutStrLn)
import qualified XMonad.StackSet as W

-- Actions
import XMonad.Actions.CopyWindow (kill1)
import XMonad.Actions.WithAll (killAll)
import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
import XMonad.Actions.SinkAll (sinkAll)
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)

-- Data
import Data.Text.Lazy.IO (hPutStrLn)
import Data.Monoid

-- Hooks
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks (docksEventHook, ToggleStruts (ToggleStruts), manageDocks, avoidStruts)
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat, doCenterFloat)
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..), xmobar, dynamicLog)

    -- Layouts
import XMonad.Layout.Accordion
import XMonad.Layout.GridVariants (Grid(Grid))
import XMonad.Layout.SimplestFloat
import XMonad.Layout.Spiral
import XMonad.Layout.ResizableTile
import XMonad.Layout.Tabbed
import XMonad.Layout.ThreeColumns

-- Layouts modifiers
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.Magnifier
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.ShowWName
import XMonad.Layout.Simplest
import XMonad.Layout.Spacing
import XMonad.Layout.SubLayouts
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import XMonad.Layout.WindowNavigation
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))

-- Utilities
import XMonad.Util.EZConfig (additionalKeysP)
import XMonad.Util.Ungrab
import XMonad.Util.NamedScratchpad (namedScratchpadFilterOutWorkspacePP)
import XMonad.Util.Run (spawnPipe, hPutStrLn)
import XMonad.Util.SpawnOnce (spawnOnce)

-- Etc
import System.Directory.Internal.Prelude (hPutStrLn)
import System.Exit (exitSuccess)
import XMonad.Actions.MouseResize
import Data.Maybe (isJust)
#+end_src
* ColorScheme
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
-- ColorScheme

colorBack = "#282c34"
colorFore = "#bbc2cf"

color01 = "#1c1f24"
color02 = "#ff6c6b"
color03 = "#98be65"
color04 = "#da8548"
color05 = "#51afef"
color06 = "#c678dd"
color07 = "#5699af"
color08 = "#202328"
color09 = "#5b6268"
color10 = "#da8548"
color11 = "#4db5bd"
color12 = "#ecbe7b"
color13 = "#3071db"
color14 = "#a9a1e1"
color15 = "#46d9ff"
color16 = "#dfdfdf"

colorTrayer = "--tint 0x282c34"
#+end_src
* Variables
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
myFont :: String
myFont = "xft:JetBrains Mono:regular:size=9:antialias=true:hinting=true"

myModMask :: KeyMask
myModMask = mod4Mask -- Sets modkey to super key

myTerminal :: String
myTerminal = "alacritty" -- Sets  default terminal

myEmacs :: String
myEmacs = "emacsclient -c -a 'emacs' "

myEditor :: String
myEditor = "emacsclient -c -a 'emacs' " -- Set emacs as editor

myBorderWidth :: Dimension
myBorderWidth = 2

myNormColor :: String
myNormColor = colorBack -- Border color of normal windows

myFocusColor :: String
myFocusColor = color15 -- Border color of focused windows
#+end_src
* AutoStart ( Startup Hook )
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
myStartUpHook :: X ()
myStartUpHook = do
  spawn "killall trayer" -- kill current trayer on each restart

  spawnOnce "nm-applet &"
  spawnOnce "pamac-tray &"
  spawnOnce "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &"
  spawnOnce "/usr/lib/xfce4/notifyd/xfce4-notifyd &"
  spawnOnce "emacs --daemon &"
#+end_src
+ We killed trayer process earlier in the autostart, so now we sleep for 2 seconds and then restart trayer.
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
  spawn ("sleep 2 && trayer --edge top --align right --widthtype request --padding 6 --SetDockType true --SetPartialStrut true --expand true --monitor 0 --transparent true --alpha 0 " ++ colorTrayer ++ " --height 22")
  spawnOnce "xrandr --output DisplayPort-0 --primary --mode 1920x1080 --rate 119.98"
  spawnOnce "xrandr --output HDMI-A-0 --mode 1360x768 --rate 59.9"
  spawnOnce "feh --bg-fill /usr/share/backgrounds/arcolinux-sddm-backgrounds/background30.jpg /usr/share/backgrounds/arcolinux-sddm-backgrounds/background30.jpg &"
#+end_src
* Layouts
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
--Makes setting the spacingRaw simpler to write. The spacingRaw module adds a configurable amount of space around windows.
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

-- Below is a variation of the above except no borders are applied
-- if fewer than two windows. So a single window has no gaps.
mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True

-- Defining a bunch of layouts, many that I don't use.
-- limitWindows n sets maximum number of windows displayed for layout.
-- mySpacing n sets the gap size around the windows.
tall     = renamed [Replace "tall"]
           $ smartBorders
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 12
           $ mySpacing 8
           $ ResizableTall 1 (3/100) (1/2) []
magnify  = renamed [Replace "magnify"]
           $ smartBorders
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ magnifier
           $ limitWindows 12
           $ mySpacing 8
           $ ResizableTall 1 (3/100) (1/2) []
monocle  = renamed [Replace "monocle"]
           $ smartBorders
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 20 Full
floats   = renamed [Replace "floats"]
           $ smartBorders
           $ limitWindows 20 simplestFloat
grid     = renamed [Replace "grid"]
           $ smartBorders
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 12
           $ mySpacing 8
           $ mkToggle (single MIRROR)
           $ Grid (16/10)
spirals  = renamed [Replace "spirals"]
           $ smartBorders
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ mySpacing' 8
           $ spiral (6/7)
threeCol = renamed [Replace "threeCol"]
           $ smartBorders
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 7
           $ ThreeCol 1 (3/100) (1/2)
threeRow = renamed [Replace "threeRow"]
           $ smartBorders
           $ windowNavigation
           $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 7
           -- Mirror takes a layout and rotates it by 90 degrees.
           -- So we are applying Mirror to the ThreeCol layout.
           $ Mirror
           $ ThreeCol 1 (3/100) (1/2)
tabs     = renamed [Replace "tabs"]
           -- I cannot add spacing to this layout because it will
           -- add spacing between window and tabs which looks bad.
           $ tabbed shrinkText myTabTheme
tallAccordion  = renamed [Replace "tallAccordion"]
           $ Accordion
wideAccordion  = renamed [Replace "wideAccordion"]
           $ Mirror Accordion

                 -- setting colors for tabs layout and tabs sublayout.
myTabTheme = def { fontName            = myFont
                 , activeColor         = color15
                 , inactiveColor       = color08
                 , activeBorderColor   = color15
                 , inactiveBorderColor = colorBack
                 , activeTextColor     = colorBack
                 , inactiveTextColor   = color16
                 }


-- The layout hook
myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats
               $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
             where
               myDefaultLayout =     withBorder myBorderWidth tall
                                 ||| magnify
                                 ||| noBorders monocle
                                 ||| floats
                                 ||| noBorders tabs
                                 ||| grid
                                 ||| spirals
                                 ||| threeCol
                                 ||| threeRow
                                 ||| tallAccordion
                                 ||| wideAccordion
#+end_src
* Workspaces
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
myWorkspaces = [" www ", " dev ", " term ", " video ", " vbox ", " chat ", " mus ", " vid ", " gfx "]
#+end_src
* ManageHook
Sets some rules for certain programs. Examples include forcing certain programs to always float, or to always appear on a certain workspace. Forcing programs to a certain workspace with a doShift requires xdotool if you are using clickable workspaces. You need the className or title of the program. Use xprop to get this info.
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
     -- 'doFloat' forces a window to float.  Useful for dialog boxes and such.
     -- using 'doShift ( myWorkspaces !! 7)' sends program to workspace 8!
     -- I'm doing it this way because otherwise I would have to write out the full
     -- name of my workspaces and the names would be very long if using clickable workspaces.
  [className =? "confirm"         --> doFloat
  , className =? "file_progress"   --> doFloat
  , className =? "dialog"          --> doFloat
  , className =? "download"        --> doFloat
  , className =? "error"           --> doFloat
  , className =? "notification"    --> doFloat
  , title =? "Mozilla Firefox"     --> doShift ( head myWorkspaces )
  , className =? "vlc"             --> doShift ( myWorkspaces !! 3 )
  , className =? "Emacs"     --> doShift ( myWorkspaces !! 1 )
  , (className =? "firefox" <&&> resource =? "Dialog") --> doFloat  -- Float Firefox Dialog
  , isFullscreen -->  doFullFloat
  ]
#+end_src
* Keybindings
I am using the Xmonad.Util.EZConfig module which allows keybindings to be written in simpler, emacs-like format.  The Super/Windows key is ‘M’ (the modkey).  The ALT key is ‘M1’.  SHIFT is ‘S’ and CTR is ‘C’.
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
myKeys =
      -- KB_GROUP Xmonad
    [ ("M-C-r", spawn "xmonad --recompile")       -- Recompiles xmonad
    , ("M-S-r", spawn "xmonad --restart")         -- Restarts xmonad
    , ("M-S-q", io exitSuccess)                   -- Quits xmonad

      -- KB_GROUP Run Prompt
    , ("M-S-<Return>", spawn "dmenu_run -i -p \"Run: \"") -- Dmenu

      -- KB_GROUP Useful programs to have a keybinding for launch
    , ("M-<Return>", spawn myTerminal)
    , ("M-M1-h", spawn (myTerminal ++ " -e htop"))

      -- KB_GROUP Kill windows
    , ("M-S-c", kill1)     -- Kill the currently focused client
    , ("M-S-a", killAll)   -- Kill all windows on current workspace

      -- KB_GROUP Workspaces
    , ("M-.", nextScreen)  -- Switch focus to next monitor
    , ("M-,", prevScreen)  -- Switch focus to prev monitor
    , ("M-S-<KP_Add>", shiftTo Next nonNSP >> moveTo Next nonNSP)       -- Shifts focused window to next ws
    , ("M-S-<KP_Subtract>", shiftTo Prev nonNSP >> moveTo Prev nonNSP)  -- Shifts focused window to prev ws

      -- KB_GROUP Floating windows
    , ("M-f", sendMessage (T.Toggle "floats")) -- Toggles my 'floats' layout
    , ("M-t", withFocused $ windows . W.sink)  -- Push floating window back to tile
    , ("M-S-t", sinkAll)                       -- Push ALL floating windows to tile

      -- KB_GROUP Increase/decrease spacing (gaps)
    , ("C-M1-j", decWindowSpacing 4)         -- Decrease window spacing
    , ("C-M1-k", incWindowSpacing 4)         -- Increase window spacing
    , ("C-M1-h", decScreenSpacing 4)         -- Decrease screen spacing
    , ("C-M1-l", incScreenSpacing 4)         -- Increase screen spacing

      -- KB_GROUP Windows navigation
    , ("M-m", windows W.focusMaster)  -- Move focus to the master window
    , ("M-j", windows W.focusDown)    -- Move focus to the next window
    , ("M-k", windows W.focusUp)      -- Move focus to the prev window
    , ("M-S-m", windows W.swapMaster) -- Swap the focused window and the master window
    , ("M-S-j", windows W.swapDown)   -- Swap focused window with next window
    , ("M-S-k", windows W.swapUp)     -- Swap focused window with prev window
    , ("M-<Backspace>", promote)      -- Moves focused window to master, others maintain order
    , ("M-S-<Tab>", rotSlavesDown)    -- Rotate all windows except master and keep focus in place
    , ("M-C-<Tab>", rotAllDown)       -- Rotate all the windows in the current stack

      -- KB_GROUP Layouts
    , ("M-<Tab>", sendMessage NextLayout)           -- Switch to next layout
    , ("M-<Space>", sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts) -- Toggles noborder/full

      -- KB_GROUP Window resizing
    , ("M-h", sendMessage Shrink)                   -- Shrink horiz window width
    , ("M-l", sendMessage Expand)                   -- Expand horiz window width
    , ("M-M1-j", sendMessage MirrorShrink)          -- Shrink vert window width
    , ("M-M1-k", sendMessage MirrorExpand)          -- Expand vert window width

      -- KB_GROUP Emacs (SUPER-e followed by a key)
    , ("M-e e", spawn myEmacs)   -- emacs dashboard
    , ("M-e b", spawn (myEmacs ++ ("--eval '(ibuffer)'")))   -- list buffers
    , ("M-e d", spawn (myEmacs ++ ("--eval '(dired nil)'"))) -- dired
    , ("M-e s", spawn (myEmacs ++ ("--eval '(eshell)'")))    -- eshell
    , ("M-e v", spawn (myEmacs ++ ("--eval '(+vterm/here nil)'"))) -- vterm if on Doom Emacs
    , ("M-e a", spawn (myEmacs ++ ("--eval '(emms)' --eval '(emms-play-directory-tree \"~/Music/\")'")))

    ,("M-x", spawn "arcolinux-logout")

    ,("<Print>", spawn "flameshot gui")
    ,("M-<Print>", spawn "flameshot full -c")
    ]
    -- The following lines are needed for named scratchpads.
          where nonNSP          = WSIs (return (\ws -> W.tag ws /= "NSP"))
                nonEmptyNonNSP  = WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))
#+end_src
* MyConfig
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
myConfig = def
            {manageHook = myManageHook <+> manageDocks
              , handleEventHook = docksEventHook
              , modMask = myModMask  -- Rebind Mod to the Super key
              , terminal = myTerminal
              , startupHook = myStartUpHook
              , layoutHook = myLayoutHook
              , workspaces = myWorkspaces
              , borderWidth = myBorderWidth
              , normalBorderColor = myNormColor
              , focusedBorderColor = myFocusColor
            } `additionalKeysP` myKeys

#+end_src
* Main
This is the “main” of XMonad. This where everything in our configs comes together and works.
#+begin_src haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
main :: IO ()
main = do
  xmproc0 <- spawnPipe "xmobar -x 0 $HOME/.config/xmobar/xmobarrc"
  xmproc1 <- spawnPipe "xmobar -x 1 $HOME/.config/xmobar/xmobarrc-second-monitor"
  xmonad . ewmh =<< xmobar myConfig
                {logHook = dynamicLogWithPP $ namedScratchpadFilterOutWorkspacePP xmobarPP
                  {ppOutput = \x -> System.Directory.Internal.Prelude.hPutStrLn xmproc0 x   -- xmobar on monitor 1
                                 >> System.Directory.Internal.Prelude.hPutStrLn xmproc1 x   -- xmobar on monitor 2
                    -- Current workspace
                  , ppCurrent = xmobarColor color06 "" . wrap
                            ("<box type=Bottom width=2 mb=2 color=" ++ color06 ++ ">") "</box>"
                    -- Visible but not current workspace
                  , ppVisible = xmobarColor color06 ""
                    -- Hidden workspace
                  , ppHidden = xmobarColor color05 "" . wrap
                           ("<box type=Top width=2 mt=2 color=" ++ color05 ++ ">") "</box>"
                    -- Hidden workspaces (no windows)
                  , ppHiddenNoWindows = xmobarColor color05 ""
                    -- Title of active window
                  , ppTitle = xmobarColor color16 "" . shorten 60
                    -- Separator character
                  , ppSep =  "<fc=" ++ color09 ++ "> <fn=1>|</fn> </fc>"
                    -- Urgent workspace
                  , ppUrgent = xmobarColor color02 "" . wrap "!" "!"
                  }

                }
#+end_src
