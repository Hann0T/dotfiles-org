#+TITLE: Index
#+STARTUP: fold

* Table of Contents :toc:
- [[#doom][doom]]
  - [[#initel][init.el]]
  - [[#configel][config.el]]
  - [[#packagesel][packages.el]]
  - [[#snippets][snippets]]
- [[#alacritty][alacritty]]
- [[#concky][concky]]
- [[#dunst][dunst]]
- [[#fish][fish]]
- [[#mpd][mpd]]
- [[#ncmpcpp][ncmpcpp]]
  - [[#ncmpcpp_notify][ncmpcpp_notify]]
  - [[#config][config]]

* doom
** init.el
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/init.el :mkdirp yes
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC
*** This file controls what Doom modules are enabled and what order they load in. Remember to run 'doom sync' after modifying it!
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       (php +lsp)               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp)               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+END_SRC
** config.el
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el :mkdirp yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC
*** basic configuration
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq user-full-name "Hans Olivas"
      user-mail-address "hansolivas1@gmail.com")

(setq doom-font (font-spec :family "JetBrains Mono" :size 16 :weight 'normal)
      doom-big-font(font-spec :family "JetBrains Mono" :size 18 :weight 'normal))
#+END_SRC
*** emacs theme
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq doom-theme 'doom-one)
(setq display-line-numbers-type 'relative)
#+END_SRC
*** default shell for emacs
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq-default shell-file-name "/usr/bin/fish")
#+END_SRC
*** project tile dir config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq projectile-project-search-path '("~/Development/"))
#+END_SRC
*** prettier config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(require 'prettier-js)
(setq prettier-js-args '(
  "--tab-width" "2"
  "--trailing-comma" "all"
  "--single-quote" "true"
  "--jsx-single-quote" "true"
  "--bracket-spacing" "true"
  "--bracket-same-line" "false"
  "--quote-props" "preserve"
))
(add-hook 'json-mode-hook 'prettier-js-mode)
(add-hook 'php-mode-hook 'prettier-js-mode)
#+END_SRC
*** web mode config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'web-mode-hook 'prettier-js-mode)
(add-hook 'css-mode-hook 'prettier-js-mode)
#+END_SRC
*** javascript config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'rjsx-mode-hook
           #'(lambda ()
               (define-key rjsx-mode-map "\C-ck" 'js-doc-insert-function-doc)
               (define-key rjsx-mode-map "@" 'js-doc-insert-tag)))
(add-hook 'js2-mode-hook 'prettier-js-mode)
(add-hook 'rjsx-mode-hook 'prettier-js-mode)
#+END_SRC
*** typescript config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'typescript-mode-hook
           #'(lambda ()
               (define-key typescript-mode-map "\C-ck" 'tide-jsdoc-template)
               (define-key typescript-mode-map "@" 'js-doc-insert-tag)))
(add-hook 'typescript-tsx-mode-hook
           #'(lambda ()
               (define-key typescript-tsx-mode-map "\C-ck" 'tide-jsdoc-template)
               (define-key typescript-tsx-mode-map "@" 'js-doc-insert-tag)))
(add-hook 'typescript-mode-hook 'prettier-js-mode)
#+END_SRC
*** org mode config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq org-archive-location "~/Documents/org/done.org")

(defun org-archive-save-buffer ()
  (let ((afile (org-extract-archive-file (org-get-local-archive-location))))
    (if (file-exists-p afile)
      (let ((buffer (find-file-noselect afile)))
        (if (y-or-n-p (format "Save (%s)" buffer))
          (with-current-buffer buffer
            (save-buffer))
          (message "You expressly chose _not_ to save (%s)" buffer)))
      (message "Ooops ... (%s) does not exist." afile))))

(add-hook 'org-archive-hook 'org-archive-save-buffer)
(setq org-directory "~/Documents/org/")
(setq org-agenda-files "~/Documents/org/agenda.org")
(setq org-log-done 'time)
#+END_SRC
*** org agenda config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-super-agenda-groups '((:name "Today"
                                        :time-grid t
                                        :scheduled today)
                                  (:name "Due Today"
                                        :deadline today)
                                  (:name "Important"
                                        :priority "A")
                                  (:name "Overdue"
                                        :deadline past)
                                  (:name "Due soon"
                                        :deadline future)
                                  (:name "Big Outcomes"
                                        :tag "bo")))
  :config
  (org-super-agenda-mode))
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
(setq org-agenda-files
      (directory-files-recursively "~/Documents/org/" "\\.org$"))
#+END_SRC
*** treemacs config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq doom-themes-treemacs-theme "doom-colors")
#+END_SRC
*** dired
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'dired-mode-hook
 (lambda ()
  (define-key dired-mode-map (kbd "-")
    (lambda () (interactive) (find-alternate-file "..")))
 ))
#+end_src
*** emms
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq emms-source-file-default-directory "~/Music/")
(setq emms-seek-seconds 5)
(setq emms-player-list '(emms-player-mpd))
(setq emms-info-functions '(emms-info-mpd))
(setq emms-player-mpd-server-name "localhost")
(setq emms-player-mpd-server-port "6601")
(defun emms-notify-track-description ()
  "Use `notify-send' to show the description of the currecnt track."
  (call-process
   "notify-send"
   nil nil nil
   "-u" "low" "-a" "EMMS"
   (emms-track-description
    (emms-playlist-current-selected-track))))

(add-hook 'emms-player-started-hook #'emms-notify-track-description)
#+end_src
*** keybindings
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(map! :leader
      :desc "open vterm"
      "v t" #'vterm)

(map! :leader
      :desc "open vterm in the current buffer"
      "v T" #'+vterm/here)

(after! evil-snipe
  (evil-snipe-mode -1))

(remove-hook 'doom-first-input-hook #'evil-snipe-mode)

(evilem-default-keybindings "SPC")

(global-set-key (kbd "M-k") #'drag-stuff-up)
(global-set-key (kbd "M-j") #'drag-stuff-down)
(global-set-key (kbd "M-l") #'sp-backward-barf-sexp)
(global-set-key (kbd "M-h") #'sp-backward-slurp-sexp)
(global-set-key (kbd "C-M-l") #'downcase-word)
(global-set-key (kbd "M-s-p") #'emms-smart-browse)
;; (global-set-key (kbd "M-s-c") #'emms-player-mpd-update-all-reset-cache)
(global-set-key (kbd "<XF86AudioPlay>") #'emms-pause)
(global-set-key (kbd "<XF86AudioStop>") #'emms-stop)
(global-set-key (kbd "<XF86AudioPrev>") #'emms-previous)
(global-set-key (kbd "<XF86AudioNext>") #'emms-next)
#+END_SRC
** packages.el
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+END_SRC
*** modes
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
#+END_SRC
*** format
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
(package! prettier-js)
#+END_SRC
*** utilities
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
(package! js-doc)
#+END_SRC
*** org
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
(package! org-super-agenda)
(package! org-superstar)
#+END_SRC
** snippets
*** rjsx-mode
#+begin_src conf :tangle ~/.doom.d/snippets/rjsx-mode/react-function-component-javascript :mkdirp yes
# -*- mode: snippet -*-
# name: react function component javascript
# key: rfc
# --

const $1 = () => {
  return $0;
};

export default $1;

#+end_src
*** typescript-tsx-mode
**** import-default
#+begin_src conf :tangle ~/.doom.d/snippets/typescript-tsx-mode/import-default :mkdirp yes
# -*- mode: snippet -*-
# name: import default
# key: imd
# --

import $1 from '$2'
$0

#+end_src
**** react-function-component-typescript
#+begin_src conf :tangle ~/.doom.d/snippets/typescript-tsx-mode/react-function-component-typescript :mkdirp yes
# -*- mode: snippet -*-
# name: react funcion component typescript
# key: rfct
# --
import React from 'react';

const $1: React.FC = () => {
  return $0;
};

export default $1;
#+end_src
* alacritty
#+BEGIN_SRC conf :tangle ~/.config/alacritty/alacritty.yml :mkdirp yes
window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels. If both are zero this
  # setting is ignored.
  dimensions:
    columns: 120
    lines: 30

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is not scaled by
  # DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Available values:
  # - full: borders and title bar
  # - none: neither borders nor title bar
  # - transparent: title bar, transparent background and title bar buttons
  # - buttonless: title bar, transparent background, but no title bar buttons
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed

scrolling:
  # How many lines of scrollback to keep,
  # '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line
  # scrolled when scrollback is enabled (history > 0).
  multiplier: 3

  # Faux Scrolling
  #
  # The `faux_multiplier` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_multiplier` to 0.
  faux_multiplier: 3

  # Automatically scroll to the bottom when new text is written
  # to the terminal.
  auto_scroll: false

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  # Style can be specified to pick a specific face.
  normal:
    family: JetBrains Mono
    style: Regular

  # The bold font face
  bold:
    family: JetBrains Mono
    style: Bold

  # The italic font face
  italic:
    family: JetBrains Mono
    style: Italic

  # Point size of the font
  size: 14.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: true

# Theme doom-one
colors:
    primary:
        background: '#282c34'
        foreground: '#bbc2cf'
    cursor:
        cursor: '#4CA6E3'
        text: '#BABABA'
    normal:
        black: '#3E4556'
        red: '#E56160'
        green: '#88AB5A'
        yellow: '#D4AB6E'
        blue: '#4CA6E3'
        magenta: '#c678dd'
        cyan: '#3FC3E5'
        white: '#DFDFD9'
    bright:
        black: '#5B6268'
        red: '#ff6c6b'
        green: '#98be65'
        yellow: '#ECBE7B'
        blue: '#51afef'
        magenta: '#a9a1e1'
        cyan: '#46D9FF'
        white: '#f8f8f2'

# Background opacity
window.opacity: 1.0

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  - { key: Equals,   mods: Control,       action: IncreaseFontSize             }
  - { key: Minus,    mods: Control,       action: DecreaseFontSize             }
  - { key: Minus,    mods: Control|Alt, action: ResetFontSize                }

  - { key: PageUp,   mods: Control,   action: ScrollPageUp   }
  - { key: PageDown, mods: Control,   action: ScrollPageDown }
  - { key: End,      mods: Control,   action: ScrollToBottom }
  - { key: Home,     mods: Control,   action: ScrollToTop    }

  - { key: K,        mods: Control, action: ClearHistory   }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# dynamic_title: false

# Live config reload (changes require restart)
live_config_reload: true

debug:
  # Should display the render timer
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - OFF
  #   - ERROR
  #   - WARN
  #   - INFO
  #   - DEBUG
  #   - TRACE
  log_level: OFF

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false

# vim: nospell

#+END_SRC
* concky
#+BEGIN_SRC conf :tangle ~/.config/bspwm/system-overview :mkdirp yes :tangle-mode (identity #o755)
--[[
#=====================================================================================
#                               ArcoLinuxD
#
# Author  : Erik Dubois at http://www.erikdubois.be
# License : Distributed under the terms of GNU GPL version 2 or later
# Documentation : http://erikdubois.be/category/linux/aureola/
#======================================================================================


]]

conky.config = {

	--Various settings

	background = true, 							-- forked to background
	cpu_avg_samples = 2,						-- The number of samples to average for CPU monitoring.
	diskio_avg_samples = 10,					-- The number of samples to average for disk I/O monitoring.
	double_buffer = true,						-- Use the Xdbe extension? (eliminates flicker)
	if_up_strictness = 'address',				-- how strict if testing interface is up - up, link or address
	net_avg_samples = 2,						-- The number of samples to average for net data
	no_buffers = true,							-- Subtract (file system) buffers from used memory?
	temperature_unit = 'celsius',				-- fahrenheit or celsius
	text_buffer_size = 2048,					-- size of buffer for display of content of large variables - default 256
	update_interval = 1,						-- update interval
	imlib_cache_size = 0,                       -- disable image cache to get a new spotify cover per song


	--Placement

	alignment = 'middle_right',					-- top-left,top-middle,top-right,bottom-left,bottom-middle,bottom-right,
												-- middle-left,middle-middle,middle-right,none
	--Arch Duoscreen
	--gap_x = -1910,
	gap_x = 10,									-- pixels between right or left border
	gap_y = 10,									-- pixels between bottom or left border
	minimum_height = 200,						-- minimum height of window
	minimum_width = 280,						-- minimum height of window
	maximum_width = 280,						-- maximum height of window

	--Graphical

	border_inner_margin = 5, 					-- margin between border and text
	border_outer_margin = 5, 					-- margin between border and edge of window
	border_width = 0, 							-- border width in pixels
	default_bar_width = 280,					-- default is 0 - full width
	default_bar_height = 10,					-- default is 6
	default_gauge_height = 25,					-- default is 25
	default_gauge_width =40,					-- default is 40
	default_graph_height = 40,					-- default is 25
	default_graph_width = 153,					-- default is 0 - full width
	default_shade_color = '#000000',			-- default shading colour
	default_outline_color = '#000000',			-- default outline colour
	draw_borders = false,						-- draw borders around text
	draw_graph_borders = true,					-- draw borders around graphs
	draw_shades = false,						-- draw shades
	draw_outline = false,						-- draw outline
	stippled_borders = 0,						-- dashing the border

	--Textual

	extra_newline = false,						-- extra newline at the end - for asesome's wiboxes
	format_human_readable = true,				-- KiB, MiB rather then number of bytes
	font = 'Noto Mono:size=11:regular',  			-- font for complete conky unless in code defined
	max_text_width = 0,							-- 0 will make sure line does not get broken if width too smal
	max_user_text = 16384,						-- max text in conky default 16384
	override_utf8_locale = true,				-- force UTF8 requires xft
	short_units = true,							-- shorten units from KiB to k
	top_name_width = 21,						-- width for $top name value default 15
	top_name_verbose = false,					-- If true, top name shows the full command line of  each  process - Default value is false.
	uppercase = false,							-- uppercase or not
	use_spacer = 'none',						-- adds spaces around certain objects to align - default none
	use_xft = true,								-- xft font - anti-aliased font
	xftalpha = 1,								-- alpha of the xft font - between 0-1

	--Windows

	own_window = true,							-- create your own window to draw
	own_window_argb_value = 150,				    -- real transparency - composite manager required 0-255
	own_window_argb_visual = true,				-- use ARGB - composite manager required
	own_window_class = 'Conky',					-- manually set the WM_CLASS name for use with xprop
	own_window_colour = '#000000',				-- set colour if own_window_transparent no
	own_window_hints = 'undecorated,below,above,sticky,skip_taskbar,skip_pager',  -- if own_window true - just hints - own_window_type sets it
	own_window_transparent = false,				-- if own_window_argb_visual is true sets background opacity 0%
	own_window_title = 'system_conky',			-- set the name manually  - default conky "hostname"
	own_window_type = 'desktop',				-- if own_window true options are: normal/override/dock/desktop/panel


	--Colours

	default_color = '#ff0000',  				-- default color and border color
	color1 = '#FFFFFF',
	color2 = '#929292',
	color3 = '#cccccc',
	color4 = '#BDBDBD',
	color5 = '#CCCCCC',
	color6 = '#aa0000',

	--Signal Colours
	color7 = '#1F7411',  						--green
	color8 = '#FFA726',  						--orange
	color9 = '#F1544B',  						--firebrick


	--Lua


};
conky.text = [[
${color1}${alignc}S Y S T E M    I N F O${color}
${color1}${hr}${color}
${color1}Host:${alignr}${color2}${nodename}${color}
#${color1}Kernel:${color2}${alignr}$kernel${color}
#${color1}Uptime:${color2}${alignr}${uptime}${color}
#${color1}UTC:${color2}${alignr}${utime %H:%M}${color}

${color1}${goto 60}Used${alignr}Size${color}
${color1}Root${goto 60}${color2}${fs_used /}${alignr}${fs_size /}${color}
#${color1}Home${goto 60}${color2}${fs_used /home}${alignr}${fs_size /home}${color}

${color1}${goto 60}Mem${alignr}Max${color}
${color1}RAM${goto 60}${color2}${mem}${alignr}${memmax}${color}
${color1}Swap${goto 60}${color2}${swap}${alignr}${swapmax}${color}

${color1}CPU:${goto 60}Used${alignr}GHz${color}
${color1}Avg${goto 60}${color2}${if_match ${cpu cpu0}<50}  ${cpu cpu0}\
${else}${if_match ${cpu cpu0}<=100}${color9} ${cpu cpu0}\
${else}${cpu cpu0}${endif}${endif}%${alignr}${freq_g}${color}

${color1}${alignc}S H O R T C U T    K E Y S${color}
${color1}${hr}${color}
${color1}[S]+[Shift]+D${alignr}${color2}Main Menu${color}
${color1}[Alt]+F2${alignr}${color2}Alt Menu${color}
${color1}[Alt]+F3${alignr}${color2}Alt Menu${color}
${color1}${hr}${color}
${color1}[S]+Enter${alignr}${color2}Terminal${color}
${color1}[S]+[Shift]+Enter${alignr}${color2}File Manager${color}
${color1}[Ctrl]+[Alt]+V${alignr}${color2}Vivaldi${color}
${color1}[S]+F2${alignr}${color2}Editor${color}
${color1}[S]+F6${alignr}${color2}Media Player${color}
${color1}[S]+[Space]${alignr}${color2}Change Layout${color}
${color1}[Ctrl]+[Shift]+Esc${alignr}${color2}Task Manager${color}
${color1}[Ctrl]+[Alt]+U${alignr}${color2}Volume Control${color}
${color1}[PrtSc]${alignr}${color2}Screenshot${color}
${color1}[S]+[Shift]+R${alignr}${color2}Restart Bspwm${color}
${color1}${hr}${color}
${color1}[S]+[Shift]+Q${alignr}${color2}Stop application${color}
${color1}[S]+x${alignr}${color2}Exit${color}
${color1}${hr}${color}
${color1}${execi 6000 lsb_release -d | grep 'Descr'|awk {'print $2 " " $3" " $4" " $5'}}${alignr}${execi 6000 lsb_release -a | grep 'Release'|awk {'print $2""$3""$4""$5'}}${color}
]];
#+END_SRC
* dunst
#+begin_src conf :tangle ~/.config/dunst/dunstrc :mkdirp yes
[global]
    monitor = 0
    follow = mouse
    width = 350
    offset = 10x50
    progress_bar = true
    progress_bar_height = 10
    progress_bar_frame_width = 1
    progress_bar_min_width = 150
    progress_bar_max_width = 400
    indicate_hidden = yes
    shrink = no
    separator_height = 2
    padding = 8
    horizontal_padding = 8
    text_icon_padding = 0
    frame_color = "#bbc2cf"
    separator_color = frame
    sort = yes
    idle_threshold = 120
    font = JetBrains Mono Nerd Font Medium 10
    line_height = 0
    markup = full
    format = "<b>%s</b>\n%b"
    alignment = left
    vertical_alignment = center
    show_age_threshold = 60
    word_wrap = yes
    ellipsize = middle
    ignore_newline = no
    stack_duplicates = true
    hide_duplicate_count = false
    show_indicators = yes
    icon_position = left
    min_icon_size = 0
    max_icon_size = 32
    icon_path = /usr/share/icons/Adwaita
    sticky_history = yes
    history_length = 20
    always_run_script = true
    title = Dunst
    class = Dunst
    ignore_dbusclose = false
    force_xwayland = false
    force_xinerama = false
    mouse_left_click = do_action, close_current
    mouse_middle_click = do_action, close_current
    mouse_right_click = close_all

[urgency_low]
    background = "#282c34"
    foreground = "#A0A8CD"
    timeout = 10

[urgency_normal]
    background = "#282c34"
    foreground = "#A0A8CD"
    script = /home/hann0t/.config/dunst/soundAlert.sh
    timeout = 10

[urgency_critical]
    background = "#282c34"
    foreground = "#E56160"
    script = /home/hann0t/.config/dunst/soundAlert.sh
    timeout = 30

#+end_src
#+begin_src shell :tangle ~/.config/dunst/soundAlert.sh :mkdirp yes :tangle-mode (identity #o755)
#!/bin/sh
paplay /home/hann0t/.config/dunst/plucky.wav
#+end_src
* fish
#+BEGIN_SRC shell :tangle ~/.config/fish/config.fish :mkdirp yes
alias ls="exa -al --color=always --group-directories-first"
alias sail='[ -f sail ] && bash sail || bash vendor/bin/sail'
alias dir-size='du -sh'
alias vlc="devour vlc"

# remove the greeting message
set -U fish_greeting

# info in the terminal
#pfetch

# shell color scripts
colorscript random

export MPD_HOST="127.0.0.1"
export MPD_PORT="6601"

# PATH

# startship
starship init fish | source
#+END_SRC
* mpd
#+begin_src conf :tangle ~/.mpd/mpd.conf :mkdirp yes
music_directory "/home/hann0t/Music/"
playlist_directory "/home/hann0t/Music/"
db_file "/home/hann0t/.mpd/mpd.db"
log_file "/home/hann0t/.mpd/mpd.log"
pid_file "/home/hann0t/.mpd/mpd.pid"
state_file "/home/hann0t/.mpd/mpdstate"
# group "audio"

# audio_output {
# type "alsa"
# name "My ALSA Device"
# }
audio_output {
	type "pulse"
	name "My Pulse Output"
}

audio_output {
	type "fifo"
	name "fifo_visualizer"
	path "/tmp/mpd.fifo"
	format "44100:16:2"
}

bind_to_address "127.0.0.1"
port "6601"

#+end_src
* ncmpcpp
** ncmpcpp_notify
#+begin_src shell :tangle ~/.ncmpcpp/ncmpcpp_notify.sh :mkdirp yes :tangle-mode (identity #o755)
#!/bin/sh

# Send notification with album art when ncmpcpp plays a new song
# execute_on_song_change must be set in ncmpcpp config

readonly MUSIC_DIR="/media/hann0t/Music"
readonly SONG_PATH="$(mpc --format '%file%' current)"
readonly SONG_DIR="$(dirname "${SONG_PATH}")"
readonly ALBUM_ART_PATH="${MUSIC_DIR}/${SONG_DIR}/cover.ico"

notify-send -i "${ALBUM_ART_PATH}" "♫ Now Playing ♫" "$(mpc --format '%title% - %artist%' current)"
#+end_src
** config
#+begin_src conf :tangle ~/.ncmpcpp/config :mkdir yes
#######################################################################
##   This is configuration file. Copy it to $HOME/.ncmpcpp/config    ##
##  or $XDG_CONFIG_HOME/ncmpcpp/config and set up your preferences   ##
#######################################################################

### directories ###

ncmpcpp_directory = ~/.ncmpcpp
mpd_music_dir = "/media/hann0t/hardDrive/Music/"

mpd_host = "127.0.0.1"
mpd_port = "6601"

### Directory for storing downloaded lyrics ###

# lyrics_directory = ~/.lyrics


################################

% egrep -v '^#' .ncmpcpp/config

visualizer_in_stereo = "no"
# visualizer_fifo_path = "~/.config/mpd/mpd.fifo"
visualizer_fifo_path = "/tmp/mpd.fifo"
visualizer_output_name = "my_fifo"
visualizer_sync_interval = "10"
visualizer_type = "spectrum"
# visualizer_look = "▮"
# visualizer_look = "º|"
visualizer_look = "▀▋"
# visualizer_look = "●▮"
visualizer_color = "blue, cyan, green, yellow, magenta, red, black"

message_delay_time = "2"

playlist_shorten_total_times = "yes"
playlist_display_mode = "classic"
playlist_editor_display_mode = "columns"

browser_display_mode = "columns"

search_engine_display_mode = "columns"

autocenter_mode = "yes"

mouse_support = "yes"

centered_cursor = "yes"

user_interface = "classic"

follow_now_playing_lyrics = "yes"

locked_screen_width_part = "60"

display_bitrate = "no"

external_editor = "vim"

progressbar_elapsed_color = "white"
progressbar_color = "black"

#progressbar_look = "▃▃▃"
# progressbar_look = "──"
progressbar_look = "─╼─"
#progressbar_look = "==─"

header_visibility = "no"
statusbar_visibility = "yes"
titles_visibility = "no"

statusbar_color = "white"

enable_window_title = "yes"

now_playing_prefix = "$b$1"
now_playing_suffix = "$8$/b"

#now_playing_prefix = "$u$2"
#now_playing_suffix = "$2$/u$2"

song_columns_list_format = "(6)[]{} (23)[cyan]{a} (26)[yellow]{t|f} (40)[green]{b} (4)[blue]{l}"

# song_list_format = " $7%l  $2%t $R$5%a "
# song_list_format = "$1> $2%a$8 - $3%b - $8%t $R $3%l  "
song_list_format = "$1> $5%a$8 - $8%t $R $2%l  "

song_status_format = "$b$7♫ $2%a $8- $3%b $8- $8%t "
song_window_title_format = " {%a} - {%t}"


###################
##  song format  ##
##
## For a song format you can use:
##
## %l - length
## %f - filename
## %D - directory
## %a - artist
## %A - album artist
## %t - title
## %b - album
## %y - date
## %n - track number (01/12 -> 01)
## %N - full track info (01/12 -> 01/12)
## %g - genre
## %c - composer
## %p - performer
## %d - disc
## %C - comment
## %P - priority
## $R - begin right alignment
##
##
## Colors:
##
## - 0 - default window color (discards all other colors)
## - 1 - black
## - 2 - red
## - 3 - green
## - 4 - yellow
## - 5 - blue
## - 6 - magenta
## - 7 - cyan
## - 8 - white
## - 9 - end of current color
## - b - bold text
## - u - underline text
## - r - reverse colors
## - a - use alternative character set
##
##
###################################################################
##  Custom command that will be executed each time song changes  ##
##
#execute_on_song_change =
#
##
###########################################################################
##  Custom command that will be executed each time player state changes  ##
##    The environment variable MPD_PLAYER_STATE is set to the current    ##
##     state (either unknown, play, pause, or stop) for its duration     ##
##
#
#execute_on_player_state_change = notify-send "$(mpc current)"

startup_slave_screen=visualizer

# execute_on_song_change="notify-send "Now playing" "$(ncmpcpp -q --current-song="{%a - }{%t}|{%f}")""
execute_on_song_change = ~/.ncmpcpp/ncmpcpp_notify.sh

#+end_src
