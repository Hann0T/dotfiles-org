#+TITLE: .doom.d
#+STARTUP: fold

* doom
** init.el
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/init.el :mkdirp yes
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC
*** This file controls what Doom modules are enabled and what order they load in. Remember to run 'doom sync' after modifying it!
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +present +roam2)      ; organize your plain life in plain text
       (php +lsp)          ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp)               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens)
       (setq lsp-intelephense-multi-root nil)
       (setq lsp-enable-file-watchers nil))
#+END_SRC
** config.el
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el :mkdirp yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC
*** basic configuration
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq user-full-name "Hans Olivas"
      user-mail-address "hansolivas1@gmail.com")

(setq doom-font (font-spec :family "JetBrains Mono" :size 20 :weight 'normal)
      doom-big-font(font-spec :family "JetBrains Mono" :size 24 :weight 'normal))

(add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
#+END_SRC
*** emacs theme
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq doom-theme 'doom-one)
(setq display-line-numbers-type 'relative)
#+END_SRC
*** default shell for emacs
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq-default shell-file-name "/bin/zsh")
#+END_SRC
*** project tile dir config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq projectile-project-search-path '("~/Development/"))
#+END_SRC
*** web mode config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
;; (add-hook 'web-mode-hook 'prettier-js-mode)
;; (add-hook 'css-mode-hook 'prettier-js-mode)
#+END_SRC
*** javascript config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'rjsx-mode-hook
           #'(lambda ()
               (define-key rjsx-mode-map "\C-ck" 'js-doc-insert-function-doc)
               (define-key rjsx-mode-map "@" 'js-doc-insert-tag)))
;; (add-hook 'js2-mode-hook 'prettier-js-mode)
;; (add-hook 'rjsx-mode-hook 'prettier-js-mode)
#+END_SRC
*** typescript config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'typescript-mode-hook
           #'(lambda ()
               (define-key typescript-mode-map "\C-ck" 'tide-jsdoc-template)
               (define-key typescript-mode-map "@" 'js-doc-insert-tag)))
(add-hook 'typescript-tsx-mode-hook
           #'(lambda ()
               (define-key typescript-tsx-mode-map "\C-ck" 'tide-jsdoc-template)
               (define-key typescript-tsx-mode-map "@" 'js-doc-insert-tag)))
;; (add-hook 'typescript-mode-hook 'prettier-js-mode)
#+END_SRC
*** jest config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(use-package jest
  :after (typescript-mode)
  :hook (typescript-mode . jest-minor-mode))
#+END_SRC
*** org mode config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq org-archive-location "~/Documents/org/archive.org")

(defun org-archive-save-buffer ()
  (let ((afile (org-extract-archive-file (org-get-local-archive-location))))
    (if (file-exists-p afile)
      (let ((buffer (find-file-noselect afile)))
        (if (y-or-n-p (format "Save (%s)" buffer))
          (with-current-buffer buffer
            (save-buffer))
          (message "You expressly chose _not_ to save (%s)" buffer)))
      (message "Ooops ... (%s) does not exist." afile))))

(add-hook 'org-archive-hook 'org-archive-save-buffer)
(setq org-directory "~/Documents/org/")
(setq org-agenda-files "~/Documents/org/agenda.org")
(setq org-log-done 'time)
#+END_SRC
*** org agenda config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-super-agenda-groups '((:name "Today"
                                        :time-grid t
                                        :scheduled today)
                                  (:name "Due Today"
                                        :deadline today)
                                  (:name "Important"
                                        :priority "A")
                                  (:name "Overdue"
                                        :deadline past)
                                  (:name "Due soon"
                                        :deadline future)
                                  (:name "Big Outcomes"
                                        :tag "bo")))
  :config
  (org-super-agenda-mode))
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
(setq org-agenda-files
      (directory-files-recursively "~/Documents/org/" "\\.org$"))
#+END_SRC
*** org capture templates
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(after! org
  (setq org-capture-templates
        `(
                ( "j" "new journal entry for today" entry
                        (file ,(concat (file-name-as-directory (concat (expand-file-name org-directory) "journal")) (format-time-string "%Y_%m_%d.org")))
                "* %u [/] \n :PROTPERTIES: \n :time: %<%H:%M> \n :END: \n** Routines\n%?\n"
                :empty-lines 1)
                ( "u" "new TODO entry for today" entry
                        (file+headline ,(concat (file-name-as-directory (concat (expand-file-name org-directory) "journal")) (format-time-string "%Y_%m_%d.org")) "Routines")
                "** TODO %?\n  %i\n")
                ("t" "new TODO entry" entry (file+headline "~/Documents/org/tasks.org" "Tasks")
                "* TODO %?\n  %i\n")
                ("i" "new IDEA entry" entry (file+headline "~/Documents/org/tasks.org" "Ideas")
                "* IDEA %?\n  %i\n")
                ("s" "new STUDY entry for study" entry (file+headline "~/Documents/org/study.org" "Study")
                "* TODO %?\n  %i\n")
                ("w" "new TODO entry for work" entry (file+headline "~/Documents/org/work.org" "Tasks")
                "* TODO %?\n  %i\n")
                ("d" "new TODO entry for Development" entry (file+headline "~/Documents/org/development.org" "Tasks")
                "* TODO %?\n  %i\n")
          )))
#+end_src
*** org todos
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(after! org
    (setq org-todo-keywords
    (quote ((sequence "TODO(t)" "NEXT(n)" "RECALL(r)" "STUDY(s)" "IDEA(i)" "|" "DONE(d)")
            (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))))

(after! org
    (setq org-todo-keyword-faces
        (quote (
                ("NEXT" :foreground "skyblue" :weight bold)
                ("IDEA" :foreground "lightyellow" :weight bold)
                ("STUDY" :foreground "lightgreen" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "red" :weight bold)
                ))))
#+END_SRC
*** org clock keybindings
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (setq fill-column 80)
;;             (define-key org-mode-map (kbd "SPC-c-i") 'org-clock-in)
;;             (define-key org-mode-map (kbd "SPC-c-o") 'org-clock-out)
;;             (define-key org-mode-map (kbd "SPC-c-d") 'org-clock-display)
;;             (define-key org-mode-map (kbd "SPC-c-r") 'org-clock-report)
;;             ))
#+END_SRC
*** treemacs config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq doom-themes-treemacs-theme "doom-colors")
#+END_SRC
*** dired
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(add-hook 'dired-mode-hook
 (lambda ()
  (define-key dired-mode-map (kbd "-")
    (lambda () (interactive) (find-alternate-file "..")))
 ))
#+end_src
*** beacon
Highlight the cursor whenever the window scrolls.
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(beacon-mode 1)
#+end_src
*** global keybindings
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(after! evil-snipe
  (evil-snipe-mode -1))

(remove-hook 'doom-first-input-hook #'evil-snipe-mode)

(evilem-default-keybindings "SPC")

(map! :leader
      :desc "expand region"
      "d" #'er/expand-region)
(global-set-key (kbd "M-k") #'drag-stuff-up)
(global-set-key (kbd "M-j") #'drag-stuff-down)
(global-set-key (kbd "M-l") #'sp-backward-barf-sexp)
(global-set-key (kbd "M-h") #'sp-backward-slurp-sexp)
(global-set-key (kbd "C-M-l") #'downcase-word)
(global-set-key (kbd "C-S-b") #'consult-lsp-file-symbols)
(global-set-key (kbd "C-c <right>") 'hs-show-block)
(global-set-key (kbd "C-c <left>") 'hs-hide-block)
#+END_SRC
*** rust config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq lsp-rust-analyzer-server-display-inlay-hints t)
;; (setq rustic-cargo-bin "~/.cargo/bin/cargo")
#+END_SRC
*** Topsy
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
;; show current function in header
(require 'topsy)
(add-hook 'prog-mode-hook #'topsy-mode)
#+END_SRC
*** volar config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
;; in order to use volar you can put a .volarrc in the root of the project to force enable volar
;;(use-package! lsp-volar)
#+END_SRC
*** php config
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el
(setq +php-run-tests-in-docker t)
(setq lsp-intelephense-multi-root nil)
(setq lsp-enable-file-watchers nil)
(setq +php-default-docker-container "laravel.test")
#+END_SRC
** packages.el
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+END_SRC
*** modes
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
(package! beacon)
#+END_SRC
*** format
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
#+END_SRC
*** utilities
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
(package! js-doc)
(package! jest)
(package! logview)
;;(package! lsp-volar :recipe (:host github :repo "jadestrong/lsp-volar"))
(package! topsy)
#+END_SRC
*** org
#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el
(package! org-super-agenda)
(package! org-superstar)
#+END_SRC
** snippets
*** rjsx-mode
#+begin_src conf :tangle ~/.doom.d/snippets/rjsx-mode/react-function-component-javascript :mkdirp yes
# -*- mode: snippet -*-
# name: react function component javascript
# key: rfc
# --

const $1 = () => {
  return $0;
};

export default $1;

#+end_src
*** typescript-tsx-mode
**** import-default
#+begin_src conf :tangle ~/.doom.d/snippets/typescript-tsx-mode/import-default :mkdirp yes
# -*- mode: snippet -*-
# name: import default
# key: imd
# --

import $1 from '$2'
$0

#+end_src
**** react-function-component-typescript
#+begin_src conf :tangle ~/.doom.d/snippets/typescript-tsx-mode/react-function-component-typescript :mkdirp yes
# -*- mode: snippet -*-
# name: react funcion component typescript
# key: rfct
# --
import React from 'react';

const $1: React.FC = () => {
  return $0;
};

export default $1;
#+end_src
*** org-mode
#+begin_src conf :tangle ~/.doom.d/snippets/org-mode/journal-summary :mkdirp yes
# -*- mode: snippet -*-
# name: new org clock report
# uuid: 1
# key: clr
# --

,#+BEGIN: clocktable :scope tree1 :maxlevel 3 :block untilnow
,#+END:
#+end_src
